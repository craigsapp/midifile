//
// Programmer:    Ziemowit Laski <zlaski@ziemas.net>
// Creation Date: Tue, 06 Feb 2018 15:01:47 -0800
// Filename:      midifile/include/MidiData.h
// Syntax:        C++11
//
// Description:   A collection of data describing the
//                MIDI note enumerations, frequencies
//                and instrumentations.

#ifndef _MIDIDATA_H_INCLUDED
#define _MIDIDATA_H_INCLUDED

#include <string>

namespace MIDI {
	enum note : unsigned char {
		C_1,
		Db_1,
		D_1,
		Eb_1,
		E_1,
		F_1,
		Gb_1,
		G_1,
		Ab_1,
		A_1,
		Bb_1,
		B_1,
		C0,
		Db0,
		D0,
		Eb0,
		E0,
		F0,
		Gb0,
		G0,
		Ab0,
		A0,
		Bb0,
		B0,
		C1,
		Db1,
		D1,
		Eb1,
		E1,
		F1,
		Gb1,
		G1,
		Ab1,
		A1,
		Bb1,
		B1,
		C2,
		Db2,
		D2,
		Eb2,
		E2,
		F2,
		Gb2,
		G2,
		Ab2,
		A2,
		Bb2,
		B2,
		C3,
		Db3,
		D3,
		Eb3,
		E3,
		F3,
		Gb3,
		G3,
		Ab3,
		A3,
		Bb3,
		B3,
		C4,
		Db4,
		D4,
		Eb4,
		E4,
		F4,
		Gb4,
		G4,
		Ab4,
		A4,
		Bb4,
		B4,
		C5,
		Db5,
		D5,
		Eb5,
		E5,
		F5,
		Gb5,
		G5,
		Ab5,
		A5,
		Bb5,
		B5,
		C6,
		Db6,
		D6,
		Eb6,
		E6,
		F6,
		Gb6,
		G6,
		Ab6,
		A6,
		Bb6,
		B6,
		C7,
		Db7,
		D7,
		Eb7,
		E7,
		F7,
		Gb7,
		G7,
		Ab7,
		A7,
		Bb7,
		B7,
		C8,
		Db8,
		D8,
		Eb8,
		E8,
		F8,
		Gb8,
		G8,
		Ab8,
		A8,
		Bb8,
		B8,
		C9,
		Db9, 
		D9,
		Eb9,
		E9,
		F9,
		Gb9,
		G9,
		count  /* 128 */
	};

	enum event_type : unsigned char {
		note_off = 0x80,
		note_on = 0x90,
		note_aftertouch = 0xA0,
		controller = 0xB0,
		program_change = 0xC0,
		channel_aftertouch = 0xD0,
		pitch_bend = 0xE0,
		sysex_single = 0xF0,
		sysex_multiple = 0xF7,
		meta = 0xFF
	};

	enum meta_type : unsigned char {
		sequence_number = 0x00,
		text = 0x01,
		copyright = 0x02,
		track_name = 0x03,
		instrument_name = 0x04,
		lyric = 0x05,
		marker = 0x06,
		cue_point = 0x07,
		program_name = 0x08,
		device_name = 0x09,
		midi_channel = 0x20,
		midi_port = 0x21,
		end_of_track = 0x2F,
		tempo = 0x51,
		smpte_offset = 0x54,
		time_signature = 0x58,
		key_signature = 0x59,
		sequencer_specific = 0x7F
	};

	enum controller : unsigned char {
		bank_select = 0x00,
		modulation_wheel = 0x01,
		breath_controller = 0x02,
		foot_controller = 0x04,
		portamento_time = 0x05,
		data_entry_msb = 0x06,
		channel_volume = 0x07,
		balance = 0x08,
		pan = 0x0A,
		expression_controller = 0x0B,
		effect_control_1 = 0x0C,
		effect_control_2 = 0x0D,
		general_purpose_controller_1 = 0x10,
		general_purpose_controller_2 = 0x11,
		general_purpose_controller_3 = 0x12,
		general_purpose_controller_4 = 0x13,
		controller_0_bank_select_lsb = 0x20,
		controller_1_modulation_wheel_lsb = 0x21,
		controller_2_breath_controller_lsb = 0x22,
		controller_3_lsb = 0x23,
		controller_4_foot_controller_lsb = 0x24,
		controller_5_portamento_time_lsb = 0x25,
		controller_6_data_entry_lsb = 0x26,
		controller_7_channel_volume_lsb = 0x27,
		controller_8_balance_lsb = 0x28,
		controller_9_lsb = 0x29,
		controller_10_pan_lsb = 0x2A,
		controller_11_expression_controller_lsb = 0x2B,
		controller_12_effect_control_1_lsb = 0x2C,
		controller_13_effect_control_2_lsb = 0x2D,
		controller_14_lsb = 0x2E,
		controller_15_lsb = 0x2F,
		controller_16_general_purpose_controller_1_lsb = 0x30,
		controller_17_general_purpose_controller_2_lsb = 0x31,
		controller_18_general_purpose_controller_3_lsb = 0x32,
		controller_19_general_purpose_controller_4_lsb = 0x33,
		controller_20_lsb = 0x34,
		controller_21_lsb = 0x35,
		controller_22_lsb = 0x36,
		controller_23_lsb = 0x37,
		controller_24_lsb = 0x38,
		controller_25_lsb = 0x39,
		controller_26_lsb = 0x3A,
		controller_27_lsb = 0x3B,
		controller_28_lsb = 0x3C,
		controller_29_lsb = 0x3D,
		controller_30_lsb = 0x3E,
		controller_31_lsb = 0x3F,
		damper_pedal_on_off = 0x40, //  [Data Byte of 0-63=0ff, 64-127=On]
		portamento_on_off = 0x41,
		sostenuto_on_off = 0x42,
		soft_pedal_on_ff = 0x43,
		legato_footswitch = 0x44,
		hold_2 = 0x45,
		sound_controller_1_timber_variation = 0x46,
		sound_controller_2_timer_harmonic_content = 0x47,
		sound_controller_3_release_time = 0x48,
		sound_controller_4_attack_time = 0x49,
		sound_controller_5_brightness = 0x4A,
		sound_controller_6_decay_time = 0x4B,
		sound_controller_7_vibrato_rate = 0x4C,
		sound_controller_8_vibrato_depth = 0x4D,
		sound_controller_9_vibrato_delay = 0x4E,
		sound_controller_10 = 0x4F,
		general_purpose_controller_5 = 0x50,
		general_purpose_controller_6 = 0x51,
		general_purpose_controller_7 = 0x52,
		general_purpose_controller_8 = 0x53,
		portamento_control = 0x54,
		effects_1_depth_reverb = 0x5B,
		effects_2_depth_tremolo = 0x5C,
		effects_3_depth_chorus = 0x5D,
		effects_4_depth_celeste_detune = 0x5E,
		effects_5_depth_phaser = 0x5F,
		data_increment = 0x60,
		data_decrement = 0x61,
		non_registered_param_lsb = 0x62,
		non_registered_param_msb = 0x63,
		registered_param_lsb = 0x64,
		registered_param_msb = 0x65,
		reset_all_controllers = 0x79,
		local_control = 0x7A,
		all_notes_off = 0x7B,
		omni_off = 0x7C,
		omni_on = 0x7D,
		mono_on_poly_off = 0x7E,
		poly_on_mono_off = 0x7F
	};

	enum registered_param : unsigned short {
		// MSB param (control 0x64) : LSB param (control 0x65)
		pitch_bend_sensitivity = 0x0000,  // MSB = +/ -semitones, LSB = +/ --cents
		channel_fine_tuning = 0x0001, // Resolution 100/8192 cents, 00H 00H = -100 cents, 40H 00H = A440, 7FH 7FH = +100 cents
		channel_coarse_tuning = 0x0002, // Only MSB used, Resolution 100 cents,	00H = -6400 cents, 40H = A440, 7FH = +6300 cents
		tuning_program_change = 0x0003,
		tuning_bank_select = 0x0004,
		modulation_depth_range = 0x0005, // For GM2, defined in GM2 Specification. For other systems, defined by manufacturer
		azimuth_angle = 0x3D00,
		elevation_angle = 0x3D01,
		gain = 0x3D02,
		distance_ratio = 0x3D03,
		maximum_distance = 0x3D04,
		gain_at_maximum_distance = 0x3D05,
		reference_distance_ratio = 0x3D06,
		pan_spread_angle = 0x3D07,
		roll_angle = 0x3D08,
		null_function_number = 0x7F7F
	};

	enum instrument : unsigned char {
		// Piano
		acoustic_grand_piano = 1,
		bright_acoustic_piano,
		electric_grand_piano,
		honky_tonk_piano,
		electric_piano_1,
		electric_piano_2,
		harpsichord,
		clavinet,
		// Chromatic Percussion
		celesta,
		glockenspiel,
		music_box,
		vibraphone,
		marimba,
		xylophone,
		tubular_bells,
		dulcimer,
		// Organ
		drawbar_organ,
		percussive_organ,
		rock_organ,
		church_organ,
		reed_organ,
		accordion,
		harmonica,
		tango_accordion,
		// Guitar
		acoustic_guitar_nylon,
		acoustic_guitar_steel,
		electric_guitar_jazz,
		electric_guitar_clean,
		electric_guitar_muted,
		overdriven_guitar,
		distortion_guitar,
		guitar_harmonics,
		// Bass
		acoustic_bass,
		electric_bass_finger,
		electric_bass_pick,
		fretless_bass,
		slap_bass_1,
		slap_bass_2,
		synth_bass_1,
		synth_bass_2,
		// Strings
		violin,
		viola,
		cello,
		contrabass,
		tremolo_strings,
		pizzicato_strings,
		orchestral_harp,
		timpani,
		// Ensemble
		string_ensemble_1,
		string_ensemble_2,
		synth_strings_1,
		synth_strings_2,
		choir_aahs,
		voice_oohs,
		synth_voice,
		orchestra_hit,
		// Brass
		trumpet,
		trombone,
		tuba,
		muted_trumpet,
		french_horn,
		brass_section,
		synth_brass_1,
		synth_brass_2,
		// Reed
		soprano_sax,
		alto_sax,
		tenor_sax,
		baritone_sax,
		oboe,
		english_horn,
		bassoon,
		clarinet,
		// Pipe
		piccolo,
		flute,
		recorder,
		pan_flute,
		blown_bottle,
		shakuhachi,
		whistle,
		ocarina,
		// Synth Lead
		lead_1_square,
		lead_2_sawtooth,
		lead_3_calliope,
		lead_4_chiff,
		lead_5_charang,
		lead_6_voice,
		lead_7_fifths,
		lead_8_bass_lead,
		// Synth Pad
		pad_1_new_age,
		pad_2_warm,
		pad_3_polysynth,
		pad_4_choir,
		pad_5_bowed,
		pad_6_metallic,
		pad_7_halo,
		pad_8_sweep,
		// Synth Effects
		fx_1_rain,
		fx_2_soundtrack,
		fx_3_crystal,
		fx_4_atmosphere,
		fx_5_brightness,
		fx_6_goblins,
		fx_7_echoes,
		fx_8_sci_fi,
		// Ethnic
		sitar,
		banjo,
		shamisen,
		koto,
		kalimba,
		bag_pipe,
		fiddle,
		shanai,
		// Percussive
		tinkle_bell,
		agogo,
		steel_drums,
		woodblock,
		taiko_drum,
		melodic_tom,
		synth_tom,
		reverse_cymbal,
		// Sound Effects
		guitar_fret_noise,
		breath_noise,
		seashore,
		bird_tweet,
		telephone_ring,
		helicopter,
		applause,
		gunshot
	};

	enum percussion : unsigned char {  // usually channel 10
		acoustic_bass_drum = 35,
		bass_drum_1,
		side_stick,
		acoustic_snare,
		hand_clap,
		electric_snare,
		low_floor_tom,
		closed_hi_hat,
		high_floor_tom,
		pedal_hi_hat,
		low_tom,
		open_hi_hat,
		low_mid_tom,
		hi_mid_tom,
		crash_cymbal_1,
		high_tom,
		ride_cymbal_1,
		chinese_cymbal,
		ride_bell,
		tambourine,
		splash_cymbal,
		cowbell, // can never have enough!
		crash_cymbal_2,
		vibraslap,
		ride_cymbal_2,
		hi_bongo,
		low_bongo,
		mute_hi_conga,
		open_hi_conga,
		low_conga,
		high_timbale,
		low_timbale,
		high_agogo,
		low_agogo,
		cabasa,
		maracas,
		short_whistle,
		long_whistle,
		short_guiro,
		long_guiro,
		claves,
		hi_woodblock,
		low_woodblock,
		mute_cuica,
		open_cuica,
		mute_triangle,
		open_triangle
	};

	constexpr double semitone = 1.0594630943592952645618252949463;
	constexpr double cent = 1.0005777895065548592967925757932;
	constexpr double half_semitone = 1.0293022366434920287823718007739;
	constexpr double half_cent = 1.0002888530352394461280429550232;

	constexpr float filter_band_1 = 1.02f;  // empirical

	const extern char *note_name[];
	const extern double note_freq[];
	double freq(float pNote);
	const extern double note_angle[];
	double angle(float pNote);
	enum note note_from_name(const std::string &pName);

} // namespace midi

#endif // #ifndef _MIDIDATA_H_INCLUDED
