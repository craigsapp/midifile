//
// Programmer:    Ziemowit Laski <zlaski@ziemas.net>
// Creation Date: Tue, 06 Feb 2018 15:01:47 -0800
// Filename:      midifile/include/MidiData.cpp
// Syntax:        C++11
//
// Description:   A collection of data describing the
//                MIDI note enumerations, frequencies
//                and instrumentations.

#include "MidiData.h"

#include <algorithm>
#include <string>

const char *MIDI::note_name[] = {
	"C-1",
	"Db-1",
	"D-1",
	"Eb-1",
	"E-1",
	"F-1",
	"Gb-1",
	"G-1",
	"Ab-1",
	"A-1",
	"Bb-1",
	"B-1",
	"C0",
	"Db0",
	"D0",
	"Eb0",
	"E0",
	"F0",
	"Gb0",
	"G0",
	"Ab0",
	"A0",
	"Bb0",
	"B0",
	"C1",
	"Db1",
	"D1",
	"Eb1",
	"E1",
	"F1",
	"Gb1",
	"G1",
	"Ab1",
	"A1",
	"Bb1",
	"B1",
	"C2",
	"Db2",
	"D2",
	"Eb2",
	"E2",
	"F2",
	"Gb2",
	"G2",
	"Ab2",
	"A2",
	"Bb2",
	"B2",
	"C3",
	"Db3",
	"D3",
	"Eb3",
	"E3",
	"F3",
	"Gb3",
	"G3",
	"Ab3",
	"A3",
	"Bb3",
	"B3",
	"C4",
	"Db4",
	"D4",
	"Eb4",
	"E4",
	"F4",
	"Gb4",
	"G4",
	"Ab4",
	"A4",
	"Bb4",
	"B4",
	"C5",
	"Db5",
	"D5",
	"Eb5",
	"E5",
	"F5",
	"Gb5",
	"G5",
	"Ab5",
	"A5",
	"Bb5",
	"B5",
	"C6",
	"Db6",
	"D6",
	"Eb6",
	"E6",
	"F6",
	"Gb6",
	"G6",
	"Ab6",
	"A6",
	"Bb6",
	"B6",
	"C7",
	"Db7",
	"D7",
	"Eb7",
	"E7",
	"F7",
	"Gb7",
	"G7",
	"Ab7",
	"A7",
	"Bb7",
	"B7",
	"C8",
	"Db8",
	"D8",
	"Eb8",
	"E8",
	"F8",
	"Gb8",
	"G8",
	"Ab8",
	"A8",
	"Bb8",
	"B8",
	"C9",
	"Db9",
	"D9",
	"Eb9",
	"E9",
	"F9",
	"Gb9",
	"G9"
};

const double MIDI::note_freq[] = {
	8.175798915643706976653,
	8.661957218027252380921,
	9.177023997418988443542,
	9.722718241315028819827,
	10.300861153527183233791,
	10.913382232281373163119,
	11.562325709738574985863,
	12.249857374429662826287,
	12.978271799373287009871,
	13.750000000000000000000,
	14.567617547440306680073,
	15.433853164253882539469,
	16.351597831287413953305,
	17.323914436054504761842,
	18.354047994837976887084,
	19.445436482630057639653,
	20.601722307054366467582,
	21.826764464562746326237,
	23.124651419477149971726,
	24.499714748859325652575,
	25.956543598746574019742,
	27.500000000000000000000,
	29.135235094880620465574,
	30.867706328507750868084,
	32.703195662574827906610,
	34.647828872109009523683,
	36.708095989675939563313,
	38.890872965260115279307,
	41.203444614108747146020,
	43.653528929125485547047,
	46.249302838954299943452,
	48.999429497718665516004,
	51.913087197493140934057,
	55.000000000000000000000,
	58.270470189761240931148,
	61.735412657015501736169,
	65.406391325149655813220,
	69.295657744218019047366,
	73.416191979351879126625,
	77.781745930520230558614,
	82.406889228217494292039,
	87.307057858250971094094,
	92.498605677908599886905,
	97.998858995437331032008,
	103.826174394986281868114,
	110.000000000000000000000,
	116.540940379522481862296,
	123.470825314031031894046,
	130.812782650299311626441,
	138.591315488436038094733,
	146.832383958703786674960,
	155.563491861040461117227,
	164.813778456434960162369,
	174.614115716501942188188,
	184.997211355817199773810,
	195.997717990874633642306,
	207.652348789972563736228,
	220.000000000000000000000,
	233.081880759044963724591,
	246.941650628062063788093,
	261.625565300598623252881,
	277.182630976872076189466,
	293.664767917407573349919,
	311.126983722080922234454,
	329.627556912869920324738,
	349.228231433003884376376,
	369.994422711634399547620,
	391.995435981749267284613,
	415.304697579945127472456,
	440.000000000000000000000,
	466.163761518089927449182,
	493.883301256124127576186,
	523.251130601197246505762,
	554.365261953744152378931,
	587.329535834815146699839,
	622.253967444161844468908,
	659.255113825739840649476,
	698.456462866007768752752,
	739.988845423268799095240,
	783.990871963498534569226,
	830.609395159890254944912,
	880.000000000000000000000,
	932.327523036179854898364,
	987.766602512248255152372,
	1046.502261202394493011525,
	1108.730523907488304757862,
	1174.659071669630293399678,
	1244.507934888323688937817,
	1318.510227651479681298952,
	1396.912925732015537505504,
	1479.977690846537598190480,
	1567.981743926997069138451,
	1661.218790319780509889824,
	1760.000000000000000000000,
	1864.655046072359709796729,
	1975.533205024496055557393,
	2093.004522404788986023050,
	2217.461047814976609515725,
	2349.318143339260132052004,
	2489.015869776647377875634,
	2637.020455302959817345254,
	2793.825851464031075011007,
	2959.955381693075196380960,
	3135.963487853994593024254,
	3322.437580639561019779649,
	3520.000000000000000000000,
	3729.310092144719419593457,
	3951.066410048992111114785,
	4186.009044809577972046100,
	4434.922095629953219031449,
	4698.636286678520264104009,
	4978.031739553294755751267,
	5274.040910605919634690508,
	5587.651702928062150022015,
	5919.910763386150392761920,
	6271.926975707989186048508,
	6644.875161279122039559297,
	7040.000000000000000000000,
	7458.620184289437020197511,
	7902.132820097987860208377,
	8372.018089619155944092199,
	8869.844191259906438062899,
	9397.272573357044166186824,
	9956.063479106589511502534,
	10548.081821211835631402209,
	11175.303405856126119033433,
	11839.821526772300785523839,
	12543.853951415974734118208
};

double MIDI::freq(float pNote) {
	return pow(2.L, (pNote - note::A4) / 12.L) * 440.0;
}

const double MIDI::note_angle[] = {
	51.370059621227333934712,
	54.424682323726997879021,
	57.660942344217460231448,
	61.089640399677534787770,
	64.722219451138968793202,
	68.570802893505074848690,
	72.648235016254190554719,
	76.968123870061958768929,
	81.544886682405405053942,
	86.393797973719316019015,
	91.531040534688457910306,
	96.973759434807163870573,
	102.740119242454667869424,
	108.849364647453995758042,
	115.321884688434920462896,
	122.179280799355069575540,
	129.444438902277937586405,
	137.141605787010149697380,
	145.296470032508381109437,
	153.936247740123917537858,
	163.089773364810810107883,
	172.787595947438632038029,
	183.062081069376944242322,
	193.947518869614242476018,
	205.480238484909335738848,
	217.698729294907991516084,
	230.643769376869755660664,
	244.358561598710139151081,
	258.888877804555932016228,
	274.283211574020242551342,
	290.592940065016762218875,
	307.872495480247948762553,
	326.179546729621563372348,
	345.575191894877264076058,
	366.124162138753888484644,
	387.895037739228484952037,
	410.960476969818671477697,
	435.397458589815983032167,
	461.287538753739511321328,
	488.717123197420278302161,
	517.777755609111864032457,
	548.566423148040485102683,
	581.185880130033524437749,
	615.744990960495897525107,
	652.359093459243126744695,
	691.150383789754528152116,
	732.248324277507776969287,
	775.790075478457083590911,
	821.920953939637342955393,
	870.794917179631966064335,
	922.575077507479250016331,
	977.434246394840556604322,
	1035.555511218223500691238,
	1097.132846296080970205367,
	1162.371760260067048875499,
	1231.489981920991567676538,
	1304.718186918486253489391,
	1382.300767579509056304232,
	1464.496648555015553938574,
	1551.580150956914167181822,
	1643.841907879274685910787,
	1741.589834359263932128670,
	1845.150155014958500032662,
	1954.868492789681113208644,
	2071.111022436447001382476,
	2194.265692592161940410733,
	2324.743520520134097750997,
	2462.979963841983135353075,
	2609.436373836972506978782,
	2764.601535159018112608464,
	2928.993297110031107877148,
	3103.160301913828334363643,
	3287.683815758549371821573,
	3483.179668718527864257339,
	3690.300310029917000065325,
	3909.736985579362226417288,
	4142.222044872894002764951,
	4388.531385184323880821466,
	4649.487041040268195501994,
	4925.959927683966270706151,
	5218.872747673945013957564,
	5529.203070318036225216929,
	5857.986594220062215754297,
	6206.320603827656668727286,
	6575.367631517098743643146,
	6966.359337437055728514679,
	7380.600620059834000130650,
	7819.473971158724452834576,
	8284.444089745788005529903,
	8777.062770368647761642933,
	9298.974082080536391003989,
	9851.919855367932541412301,
	10437.745495347890027915128,
	11058.406140636072450433858,
	11715.973188440124431508593,
	12412.641207655311518465169,
	13150.735263034197487286292,
	13932.718674874111457029358,
	14761.201240119664362282492,
	15638.947942317448905669153,
	16568.888179491579649038613,
	17554.125540737295523285866,
	18597.948164161072782007977,
	19703.839710735868720803410,
	20875.490990695780055830255,
	22116.812281272144900867715,
	23431.946376880248863017187,
	24825.282415310623036930338,
	26301.470526068394974572584,
	27865.437349748222914058715,
	29522.402480239328724564984,
	31277.895884634897811338305,
	33137.776358983159298077226,
	35108.251081474591046571732,
	37195.896328322145564015955,
	39407.679421471737441606820,
	41750.981981391560111660510,
	44233.624562544289801735431,
	46863.892753760490450076759,
	49650.564830621267901733518,
	52602.941052136789949145168,
	55730.874699496445828117430,
	59044.804960478679277002811,
	62555.791769269795622676611,
	66275.552717966304044239223,
	70216.502162949196645058692,
	74391.792656644291128031909,
	78815.358842943445779383183
};

double MIDI::angle(float pNote) {
	return (freq(pNote) * 6.283185307179586476925286766559005768);
}

static const char *note_mappings[][2] = {
	{ "A#", "Bb" },
	{ "B#", "C" },
	{ "C#", "Db" },
	{ "D#", "Eb" },
	{ "E#", "F" },
	{ "F#", "Gb" },
	{ "G#", "Ab" },
	{ "Cb", "B" },
	{ "Fb", "E" },
	{ nullptr, nullptr }
};

enum MIDI::note MIDI::note_from_name(const std::string &pName) {
	if (isdigit(pName[0])) {
		// just parse as a MIDI note number
		return (MIDI::note)atoi(pName.c_str());
	}
	const char *num;
	// NB: we allow an underscore as a minus sign
	for (num = pName.c_str(); *num && !strchr("-_0123456789", *num); ++num);
	if (!*num) {
		fprintf(stderr, "Octave number missing!\n");
		exit(1);
	}

	std::string note(pName.c_str(), num - pName.c_str());
	note[0] = toupper(note[0]);

	// normalize assorted sharps and flats
	for (int i = 0; note_mappings[i][0]; ++i) {
		if (note == note_mappings[i][0]) {
			note = note_mappings[i][1];
			break;
		}
	}

	note.append(num);

	for (enum MIDI::note i = C_1; i <= G9; i = (MIDI::note)(i + 1)) {
		if (note == note_name[i]) {
			return i;
		}
	}
	return MIDI::note::count;

}


